{"version":3,"sources":["Exercise.js","App.js","serviceWorker.js","index.js"],"names":["Exercise","props","handleRangeChange","event","newValue","setState","rangeSliderValue","handleLengthChange","tablesLength","handleRoundsChange","rounds","handleTimeChange","time","handleStart","start","questions","input","score","generateQuestion","handleStop","finish","valuetext","value","handleInputChange","target","checkForCorrectAnswer","currentRound","state","length","answer","parseInt","curState","min","max","p1","Math","floor","random","p2","newQuestions","push","round","timeProgress","startTimer","intervalID","setInterval","clearInterval","console","log","handleSkip","render","className","Typography","id","gutterBottom","Slider","step","marks","disabled","onChange","valueLabelDisplay","aria-labelledby","getAriaValueText","Button","variant","color","onClick","Card","LinearProgress","CardContent","inputProps","style","textAlign","type","CardActions","size","Component","App","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.6e6bd9ea.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport { Button } from \"@material-ui/core\";\r\nimport Slider from \"@material-ui/core/Slider\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Card from \"@material-ui/core/Card\";\r\nimport CardActions from \"@material-ui/core/CardActions\";\r\nimport CardContent from \"@material-ui/core/CardContent\";\r\nimport TextField from \"@material-ui/core/Input\";\r\nimport LinearProgress from \"@material-ui/core/LinearProgress\";\r\nimport \"./stylesheets/Exercise.css\";\r\n\r\nclass Exercise extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      rangeSliderValue: [1, 10],\r\n      tablesLength: 10,\r\n      rounds: 10,\r\n      time: 10,\r\n      start: false,\r\n      questions: [],\r\n      input: \"\",\r\n      score: 0,\r\n      timeProgress: 0,\r\n      finish: false,\r\n    };\r\n  }\r\n  handleRangeChange = (event, newValue) => {\r\n    this.setState({\r\n      rangeSliderValue: newValue,\r\n    });\r\n  };\r\n  handleLengthChange = (event, newValue) => {\r\n    this.setState({\r\n      tablesLength: newValue,\r\n    });\r\n  };\r\n  handleRoundsChange = (event, newValue) => {\r\n    this.setState({\r\n      rounds: newValue,\r\n    });\r\n  };\r\n  handleTimeChange = (event, newValue) => {\r\n    this.setState({\r\n      time: newValue,\r\n    });\r\n  };\r\n  handleStart = () => {\r\n    this.setState({ start: true, questions: [], input: \"\", score: 0 }, () => {\r\n      this.generateQuestion();\r\n    });\r\n  };\r\n  handleStop = () => {\r\n    this.setState({ start: false, finish: false });\r\n  };\r\n  // For ARIA\r\n  valuetext = (value) => {\r\n    return value;\r\n  };\r\n  handleInputChange = (event) => {\r\n    this.setState({ input: event.target.value }, () => {\r\n      this.checkForCorrectAnswer();\r\n    });\r\n  };\r\n  checkForCorrectAnswer = () => {\r\n    let currentRound = this.state.questions.length;\r\n    let answer = this.state.questions[currentRound - 1].answer;\r\n    if (answer === parseInt(this.state.input)) {\r\n      this.setState(\r\n        (curState) => {\r\n          return {\r\n            score: curState.score + 1,\r\n            input: \"\",\r\n          };\r\n        },\r\n        () => {\r\n          if (currentRound < this.state.rounds) {\r\n            this.generateQuestion();\r\n          } else {\r\n            this.setState({ finish: true, start: false });\r\n          }\r\n        }\r\n      );\r\n    }\r\n  };\r\n  generateQuestion = () => {\r\n    let min = this.state.rangeSliderValue[0];\r\n    let max = this.state.rangeSliderValue[1];\r\n    let p1 = Math.floor(Math.random() * (max - min + 1) + min);\r\n    let p2 = Math.floor(Math.random() * this.state.tablesLength + 1);\r\n    let currentRound = this.state.questions.length + 1;\r\n    const newQuestions = [...this.state.questions];\r\n    newQuestions.push({ p1, p2, answer: p1 * p2, round: currentRound });\r\n    this.setState({ questions: newQuestions, timeProgress: 0 }, () => {\r\n      this.startTimer(currentRound);\r\n    });\r\n  };\r\n  startTimer = (currentRound) => {\r\n    let intervalID = setInterval(() => {\r\n      if (this.state.timeProgress >= 100) {\r\n        this.setState({ input: \"\" }, () => {\r\n          clearInterval(intervalID);\r\n          if (currentRound < this.state.rounds && this.state.start) {\r\n            this.generateQuestion();\r\n          } else if (this.state.start) {\r\n            this.setState({ finish: true, start: false });\r\n          }\r\n        });\r\n      } else if (this.state.questions.length !== currentRound) {\r\n        console.log(\"finished early so turning off\");\r\n        clearInterval(intervalID);\r\n      } else {\r\n        this.setState((curState) => {\r\n          return {\r\n            timeProgress: curState.timeProgress + 100 / this.state.time,\r\n          };\r\n        });\r\n      }\r\n    }, 1000);\r\n  };\r\n  handleSkip = () => {\r\n    let currentRound = this.state.questions.length;\r\n    this.setState({ input: \"\" }, () => {\r\n      if (currentRound < this.state.rounds) {\r\n        this.generateQuestion();\r\n      } else {\r\n        this.setState({ finish: true, start: false });\r\n      }\r\n    });\r\n  };\r\n  render = () => {\r\n    return (\r\n      <div className=\"Exercise\">\r\n        {!this.state.start && !this.state.finish && (\r\n          <div className=\"Exercise-top\">\r\n            <Typography id=\"range-tables\" gutterBottom>\r\n              Range of multiplication tables\r\n            </Typography>\r\n            <Slider\r\n              min={0}\r\n              step={10}\r\n              marks\r\n              disabled={this.state.start}\r\n              value={this.state.rangeSliderValue}\r\n              onChange={this.handleRangeChange}\r\n              valueLabelDisplay=\"auto\"\r\n              aria-labelledby=\"range-tables\"\r\n              getAriaValueText={this.valuetext}\r\n            />\r\n            <Typography id=\"length-tables\" gutterBottom>\r\n              Length of multiplication tables\r\n            </Typography>\r\n            <Slider\r\n              min={10}\r\n              step={1}\r\n              disabled={this.state.start}\r\n              value={this.state.tablesLength}\r\n              onChange={this.handleLengthChange}\r\n              valueLabelDisplay=\"auto\"\r\n              aria-labelledby=\"length-tables\"\r\n              getAriaValueText={this.valuetext}\r\n            />\r\n            <Typography id=\"number-rounds\" gutterBottom>\r\n              Number of rounds\r\n            </Typography>\r\n            <Slider\r\n              min={5}\r\n              max={20}\r\n              step={1}\r\n              marks\r\n              disabled={this.state.start}\r\n              value={this.state.rounds}\r\n              onChange={this.handleRoundsChange}\r\n              valueLabelDisplay=\"auto\"\r\n              aria-labelledby=\"number-rounds\"\r\n              getAriaValueText={this.valuetext}\r\n            />\r\n            <Typography id=\"time\" gutterBottom>\r\n              Time per round (seconds)\r\n            </Typography>\r\n            <Slider\r\n              min={5}\r\n              max={20}\r\n              step={1}\r\n              marks\r\n              disabled={this.state.start}\r\n              value={this.state.time}\r\n              onChange={this.handleTimeChange}\r\n              valueLabelDisplay=\"auto\"\r\n              aria-labelledby=\"time\"\r\n              getAriaValueText={this.valuetext}\r\n            />\r\n            <Button\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              onClick={this.handleStart}\r\n            >\r\n              Start\r\n            </Button>\r\n          </div>\r\n        )}\r\n        {this.state.start && this.state.questions.length > 0 && (\r\n          <div className=\"Exercise-bottom\">\r\n            <Button\r\n              variant=\"contained\"\r\n              color=\"secondary\"\r\n              onClick={this.handleStop}\r\n            >\r\n              Stop\r\n            </Button>\r\n            <Card className=\"Exercise-card\">\r\n              <LinearProgress\r\n                variant=\"determinate\"\r\n                value={this.state.timeProgress}\r\n              />\r\n              <CardContent>\r\n                <Typography gutterBottom>\r\n                  Round: {this.state.questions.length} / {this.state.rounds}\r\n                </Typography>\r\n                <Typography gutterBottom>\r\n                  {this.state.questions[this.state.questions.length - 1].p1} X{\" \"}\r\n                  {this.state.questions[this.state.questions.length - 1].p2}\r\n                </Typography>\r\n                <TextField\r\n                  value={this.state.input}\r\n                  onChange={this.handleInputChange}\r\n                  className=\"Exercise-input\"\r\n                  inputProps={{ style: { textAlign: \"center\" } }}\r\n                  type=\"number\"\r\n                />\r\n              </CardContent>\r\n              <CardActions>\r\n                <Button size=\"small\" onClick={this.handleSkip}>\r\n                  Skip\r\n                </Button>\r\n              </CardActions>\r\n            </Card>\r\n          </div>\r\n        )}\r\n        {!this.state.start && this.state.finish && (\r\n          <div className=\"Exercise-score\">\r\n            <Card className=\"Exercise-card\">\r\n              <CardContent>\r\n                <Typography gutterBottom>\r\n                  Your Score is {this.state.score} / {this.state.rounds}.\r\n                </Typography>\r\n              </CardContent>\r\n              <CardActions>\r\n                <Button size=\"small\" onClick={this.handleStop}>\r\n                  Continue\r\n                </Button>\r\n              </CardActions>\r\n            </Card>\r\n          </div>\r\n        )}\r\n      </div>\r\n    );\r\n  };\r\n}\r\n\r\nexport default Exercise;\r\n","import React, { Component } from \"react\";\nimport Exercise from \"./Exercise\";\nimport \"./stylesheets/App.css\";\n\nclass App extends Component {\n  render = () => {\n    return (\n      <div className=\"App\">\n        <Exercise />\n      </div>\n    );\n  };\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./stylesheets/index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}